<?xml version="1.0" encoding="UTF-8"?>
<project name="socialize-sdk-custom">
	<target name="-pre-compile">
		<!--
		<copy todir="libs" verbose="true" failonerror="false">
			<fileset dir="libext" includes="**/*.jar"/>
		</copy>
		-->
		<!-- Set the version -->
		<replaceregexp file="src/com/socialize/Socialize.java" match="public\s+static\s+final\s+String\s+VERSION\s*=\s*&quot;.*&quot;" replace="public static final String VERSION = &quot;${version}&quot;" />
		
	</target>
	
	<target name="-post-package">
		<!--
		<delete verbose="true" failonerror="false">
			<fileset dir="libs" includes="**/*.jar"/>
		</delete>
		-->
	</target>	
	
	
	<!-- 
		################################################################################################
		SOCIALIZE TARGETS
		################################################################################################
	-->		
	
	<target name="check-paths">
	
		<property environment="env"/> 
		
		<echo>${env.PATH}</echo>
		
		<condition property="sphinx.available"> 
			<or> 
				<available file="sphinx-build" filepath="${env.PATH}"/> 
			</or> 
		</condition> 
		
	</target>	
	
	<target name="build">
		<antcall target="clean"/>
		<antcall target="jar"/>
		<antcall target="package"/>
	</target>
	
	<target name="jar" depends="compile-for-build, -jar"/>

	<target name="-jar">
		
		<property name="build.path" value="build"/>
		
		<!-- Manually copy config files -->
		<echo>Out dir is [${out.dir}]</echo>

		<copy todir="${out.dir}/classes" verbose="true" >
			<fileset dir="src">
				<include name="socialize_core_beans.xml"/>
				<include name="socialize_notification_beans.xml"/>
				<include name="socialize_ui_beans.xml"/>
				<include name="socialize.errors.properties"/>
				<include name="default.socialize.properties"/>
			</fileset>
		</copy>
		
		<copy todir="${out.dir}/classes/res/" verbose="true" >
			<fileset dir="src/res" includes="**/**"/>
		</copy>
		
		<delete dir="${build.path}"/>
		<mkdir dir="${build.path}"/>
		
		<jar destfile="${build.path}/socialize-${version}.jar">
			
			<fileset dir="${out.dir}/classes" excludes="**/R.class **/R$*.class"/>
			
			<manifest>
				<attribute name="Built-By" value="${vendor}" />
				<attribute name="Implementation-Vendor" value="${vendor}" />
				<attribute name="Implementation-Title" value="${title}" />
				<attribute name="Implementation-Version" value="${version}" />
			</manifest>
		</jar>
	</target>
		
	<target name="doc" description="Uses sphinx to generate SDK documentation" depends="sphinx"/>
	
	<!-- Python is required on target system for this to work!-->
	<target name="sphinx" description="Uses sphinx to generate SDK documentation" if="sphinx.available" depends="check-paths">
		
		<echo>Setting version in docs to ${version}</echo>
		
		<copy file="doc/sphinx/source/conf_template.py" tofile="doc/sphinx/source/conf.py" overwrite="true"/>
		
		<replaceregexp file="doc/sphinx/source/conf.py" match="\@socialize.version" replace="v${version}" flags="g" />
		
		<delete dir="build/docs/static"/>
		<delete dir="build/docs/user_guide" verbose="true"/>
		<mkdir dir="build/docs/user_guide"/>

		<exec executable="sphinx-build" failonerror="true" dir="${basedir}">
	       	<arg value="-a"/>
	        <arg value="-E"/>
			<arg value="doc/sphinx/source"/>
			<arg value="build/docs/user_guide"/>
		</exec>
		
		<!-- Manually rename folders and references with underscore -->
		<replaceregexp flags="g" match="_static" replace="static">
			<fileset dir="build/docs/user_guide" includes="**/*.html **/*.js **/*.css"/>
		</replaceregexp>
		
		<replaceregexp flags="g" match="_images" replace="images">
			<fileset dir="build/docs/user_guide" includes="**/*.html **/*.js **/*.css"/>
		</replaceregexp>
		
		<replaceregexp flags="g" match="_sources" replace="sources">
			<fileset dir="build/docs/user_guide" includes="**/*.html **/*.js **/*.css"/>
		</replaceregexp>

		<move file="build/docs/user_guide/_static" tofile="build/docs/user_guide/static" verbose="true"/>
		<move file="build/docs/user_guide/_images" tofile="build/docs/user_guide/images" verbose="true"/>
		<move file="build/docs/user_guide/_sources" tofile="build/docs/user_guide/sources" verbose="true"/>

		<copy 
			file="doc/read_me_first.html" 
			todir="build" 
			verbose="true" 
			failonerror="true" 
			overwrite="true"/>
		
		<delete file="doc/sphinx/source/conf.py"/>
	</target>

	<target name="javadoc" depends="-build-setup">
		<path id="javadoc.classpath">
			<path refid="project.target.class.path" />
			<pathelement path="libext/commons-codec-1.4.jar"/>
		</path>
		
		<path id="javadoc.sourcepath">
			<pathelement path="src"/>
		</path>		
		
		<mkdir dir="build/docs/javadoc"/>
		<tstamp>
			<format property="year" pattern="yyyy" locale="en,UK" />
		</tstamp>

		<!-- add packagenames="com.socialize" to filter -->
		<javadoc 
			stylesheetfile="doc/javadoc/stylesheet.css"
			sourcepathref="javadoc.sourcepath"
			classpathref="javadoc.classpath"
			destdir="build/docs/javadoc" 
			doctitle="${vendor} SDK v${version} Documentation" 
			excludepackagenames="com.google.*,com.socialize.oauth.signpost.*,com.socialize.google.*,com.socialize.facebook.*">
			
			<header>
				<![CDATA[${vendor} SDK v${version} Documentation<br/>Copyright ${year} ${vendor}<br/><a href="${website}">${website}</a>]]>
			</header>
			
			<footer>
				<![CDATA[Copyright ${year} ${vendor}<br/>${website}]]>
			</footer>
			
			<link 
				href="http://developer.android.com/reference/" 
				offline="true"
				packagelistloc="${sdk.dir}/docs/reference"/>
			
			<link href="http://www.json.org/javadoc/"/>
		</javadoc>
	</target>
	
	<target name="package" depends="javadoc, sphinx">
		
		<!-- Copy sample to tmp -->
		
		<property name="sample_dir" value="/tmp/sdk-sample"/>
			
		<delete dir="${sample_dir}"/>
		<mkdir dir="${sample_dir}"/>
		<copy todir="${sample_dir}">
			<fileset dir="../demo/" excludes="gen/**,bin/**,build/**,codetemplates.xml"/>
		</copy>
		<copy todir="${sample_dir}/libs">
			<fileset dir="build" includes="*.jar"/>
		</copy>
		<!-- Clean up sample app for packaging -->
		<replaceregexp file="${sample_dir}/.classpath" match="&lt;classpathentry kind=&quot;src&quot; path=&quot;socialize-sdk_src&quot;/&gt;" replace="&lt;classpathentry kind=&quot;lib&quot; path=&quot;libs/socialize-${version}.jar&quot;/&gt;" byline="true"/>
		<replaceregexp file="${sample_dir}/.classpath" match="&lt;classpathentry kind=&quot;src&quot; path=&quot;android-ioc_src&quot;/&gt;" replace=""  byline="true"/>
		<replaceregexp file="${sample_dir}/ant.properties" match="android.library.reference.1=../sdk" replace="" byline="true"/>
		<replaceregexp file="${sample_dir}/.project" flags="s" match="&lt;linkedResources&gt;.*&lt;/linkedResources&gt;" replace="" />
		 
		<!-- Create the ZIP file for distribution -->
		<zip destfile="build/socialize-sdk-android-${version}.zip">
			<zipfileset dir="build" includes="**/*.jar" prefix="dist"/>
			<zipfileset dir="icons" includes="**/*.psd" prefix="icons"/>
			
			<!-- Add the sample app as a raw eclipse project -->
			<zipfileset dir="${sample_dir}" prefix="sample" excludes="gen/**,bin/**,build/**,codetemplates.xml,build-qa.xml,build-qa.properties,emma.properties,proguard.cfg,.DS_Store,assets/json/**,assets/socialize.sample.properties"/>
			 
			<!-- Add Docs -->
			<zipfileset dir="build/docs" prefix="docs"/>
			<zipfileset dir="build" includes="read_me_first.html"/>
		</zip>
		
		<!-- clean up -->
		<delete dir="${sample_dir}"/>
		 
		<delete dir="build/docs"/>
		<delete file="build/read_me_first.html"/>
	</target>
	
	<target name="compile-for-build">
		<property name="build.is.instrumented" value="false" />
		<property name="emma.enabled" value="false" />
		<antcall target="-compile" inheritall="true" inheritrefs="true"/>
	</target>	
	
</project>	